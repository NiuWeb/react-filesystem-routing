{"version":3,"file":"static/js/82.8079eb02.chunk.js","mappings":"iRAiCA,EA3BiC,WAC7B,IAAMA,GAAWC,EAAAA,EAAAA,MAIXC,GAHWC,EAAAA,EAAAA,MAGMC,SAASC,MAAM,KAAK,GAE3C,GAA0BC,EAAAA,EAAAA,UAAmB,IAA7C,eAAOC,EAAP,KAAcC,EAAd,MACAC,EAAAA,EAAAA,YAAU,WACND,GAASE,EAAAA,EAAAA,IAAe,QACzB,IAEH,IAAMC,EAAYC,KAAKC,IAAI,EAAGN,EAAMO,WAAU,SAAAC,GAAC,OAAIC,EAAAA,EAAAA,IAAad,EAAOa,EAAEb,WACzE,OAAO,SAACe,EAAA,EAAD,CACHC,MAAOP,EACPQ,eAAe,YACfC,UAAU,UAHP,SAKFb,EAAMc,KAAI,SAACN,EAAGO,GAAJ,OAAU,SAACC,EAAA,EAAD,CAEjBC,MAAOT,EAAEU,MACTP,MAAOI,EACPI,UAAU,IACVC,QAAS,kBAAM3B,EAASe,EAAEb,SAJrBoB,SCFjB,EAjB4B,WACxB,OAAO,iCACH,SAACM,EAAA,EAAD,CAAQC,mBAAiB,EAACC,GAAI,CAC1BC,OAAQ,SAACC,GAAD,OAAWA,EAAMD,OAAOE,OAAS,GACzCC,gBAAiB,gBAFrB,UAII,UAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,gBAAgBC,WAAW,SAA9D,WACI,SAACH,EAAA,EAAD,KACA,SAACA,EAAA,EAAD,WACI,SAAC,EAAD,OAEJ,SAACA,EAAA,EAAD,UAGR,SAAClB,EAAA,EAAD,Q,UCkBR,EAhC8B,WAE1B,IAAMsB,GAAWpC,EAAAA,EAAAA,MACXH,GAAWC,EAAAA,EAAAA,MAEjB,GAA0BK,EAAAA,EAAAA,UAAmB,IAA7C,eAAOC,EAAP,KAAcC,EAAd,MACAC,EAAAA,EAAAA,YAAU,WACN,IACM+B,EAAW,IADJD,EAASnC,SAASC,MAAM,KAAK,GAEpCoC,GAAS/B,EAAAA,EAAAA,IAAe8B,EAAU,GACxChC,EAASiC,KACV,CAACF,IASJ,OAHWhC,EAAMmC,MAAK,SAAA3B,GAAC,OAAIA,EAAEb,MAAMyC,WAAWJ,EAASnC,cAG1B,SAACa,EAAA,EAAD,CACzBC,MAAOqB,EAASnC,SAChBwC,YAAY,WACZC,SAAU,SAACC,EAAGC,GAAJ,OAAU/C,EAAS+C,IAHJ,SAKxBxC,EAAMc,KAAI,SAAA2B,GAAI,OAAI,SAACzB,EAAA,EAAD,CAEfL,MAAO8B,EAAK9C,MACZsB,MAAOwB,EAAKvB,OAFPuB,EAAK9C,YANK,MCR3B,EAb6B,WACzB,OAAO,+BACH,UAAC+C,EAAA,GAAD,CACIC,QAAQ,YACRC,OAAO,QACPrB,GAAI,CACA,qBAAsB,CAAEsB,UAAW,aAAcC,MAPtC,MAGnB,WAMI,SAACpC,EAAA,EAAD,KACA,SAAC,EAAD,U,UCgBZ,EAxBwD,SAAC,GAAkB,IAAhBqC,EAAe,EAAfA,SAIjDC,EAA+B,OAFpBpD,EAAAA,EAAAA,MAEOC,SAExB,OAAO,iCACH,SAAC,EAAD,KACA,UAAC+B,EAAA,EAAD,CAAKC,QAAQ,OAAb,WACI,SAACD,EAAA,EAAD,CAAKL,GAAI,CACLuB,MAAOE,EAAS,OAAQ,CAAEC,GAAG,eAAD,ODZjB,ICYiB,SADhC,UAGI,SAACC,EAAA,EAAD,UACKH,MAGRC,EAAS,MAAM,SAACpB,EAAA,EAAD,CAAKL,GAAI,CACrBuB,MAAO,CAAEG,GAAG,GAAD,ODnBA,ICmBA,QADC,UAGZ,SAAC,EAAD","sources":["components/layout/AppNavbar/AppTabs.tsx","components/layout/AppNavbar/index.tsx","components/layout/AppSidebar/SidebarList.tsx","components/layout/AppSidebar/index.tsx","pages/_layout.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { getChildRoutes, IRoute, isChildRoute } from \"src/routing\";\nimport Tab from \"@mui/material/Tab\";\nimport Tabs from \"@mui/material/Tabs\";\n\nexport const AppTabs: React.FC = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    // get the main route of the current location\n    const route = location.pathname.split(\"/\")[1];\n\n    const [pages, setPages] = useState<IRoute[]>([]);\n    useEffect(() => {\n        setPages(getChildRoutes(\"/\"));\n    }, []);\n\n    const pageIndex = Math.max(0, pages.findIndex(x => isChildRoute(route, x.route)));\n    return <Tabs\n        value={pageIndex}\n        indicatorColor=\"secondary\"\n        textColor=\"inherit\"\n    >\n        {pages.map((x, i) => <Tab\n            key={i}\n            label={x.title}\n            value={i}\n            component=\"a\"\n            onClick={() => navigate(x.route)}\n        />)}\n    </Tabs>\n}\nexport default AppTabs;","import Box from \"@mui/material/Box\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Tabs from \"@mui/material/Tabs\";\nimport AppTabs from \"./AppTabs\";\n\n// get the main pages\nconst AppNavbar: React.FC = () => {\n    return <>\n        <AppBar enableColorOnDark sx={{\n            zIndex: (theme) => theme.zIndex.drawer + 1,\n            backgroundColor: \"primary.dark\"\n        }}>\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Box></Box>\n                <Box>\n                    <AppTabs />\n                </Box>\n                <Box></Box>\n            </Box>\n        </AppBar>\n        <Tabs></Tabs>\n    </>\n}\nexport default AppNavbar;","import { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport Tab from \"@mui/material/Tab\";\nimport Tabs from \"@mui/material/Tabs\";\nimport { getChildRoutes, IRoute } from \"src/routing\";\n\nconst SidebarList: React.FC = () => {\n\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const [pages, setPages] = useState<IRoute[]>([]);\n    useEffect(() => {\n        const base = location.pathname.split(\"/\")[1];\n        const basepath = \"/\" + base;\n        const childs = getChildRoutes(basepath, 2);\n        setPages(childs);\n    }, [location]);\n\n    /**\n     * Check if pages are in the current path\n     */\n    const checkPages = () => {\n        return pages.some(x => x.route.startsWith(location.pathname));\n    }\n\n    return !checkPages() ? null: <Tabs\n        value={location.pathname}\n        orientation=\"vertical\"\n        onChange={(_, v) => navigate(v)}\n    >\n        {pages.map(page => <Tab\n            key={page.route}\n            value={page.route}\n            label={page.title}\n        />)}\n    </Tabs>\n}\nexport default SidebarList;","import Drawer from \"@mui/material/Drawer\"\nimport Tabs from \"@mui/material/Tabs\"\nimport SidebarList from \"./SidebarList\";\n\nexport const drawerWidth = 240;\nconst AppSidebar: React.FC = () => {\n    return <>\n        <Drawer\n            variant=\"permanent\"\n            anchor=\"right\"\n            sx={{\n                '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth }\n            }}>\n            <Tabs />\n            <SidebarList />\n        </Drawer>\n    </>\n}\nexport default AppSidebar;","import AppNavbar from \"src/components/layout/AppNavbar\"\nimport AppSidebar, { drawerWidth } from \"src/components/layout/AppSidebar\";\nimport Box from \"@mui/material/Box\"\nimport Container from \"@mui/material/Container\";\nimport { useLocation } from \"react-router-dom\";\n\nconst Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n\n    const location = useLocation();\n\n    const isMain = location.pathname === \"/\";\n\n    return <>\n        <AppNavbar />\n        <Box display=\"flex\">\n            <Box sx={{\n                width: isMain ? \"100%\": { lg: `calc(100% - ${drawerWidth}px)` },\n            }}>\n                <Container>\n                    {children}\n                </Container>\n            </Box>\n            {isMain ? null: <Box sx={{\n                width: { lg: `${drawerWidth}px` },\n            }}>\n                <AppSidebar />\n            </Box>}\n        </Box>\n    </>\n}\nexport default Layout;"],"names":["navigate","useNavigate","route","useLocation","pathname","split","useState","pages","setPages","useEffect","getChildRoutes","pageIndex","Math","max","findIndex","x","isChildRoute","Tabs","value","indicatorColor","textColor","map","i","Tab","label","title","component","onClick","AppBar","enableColorOnDark","sx","zIndex","theme","drawer","backgroundColor","Box","display","justifyContent","alignItems","location","basepath","childs","some","startsWith","orientation","onChange","_","v","page","Drawer","variant","anchor","boxSizing","width","children","isMain","lg","Container"],"sourceRoot":""}